package Stategy;

import static org.mockito.Mockito.mock;

import java.io.File;
import java.io.IOException;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;
import org.mockito.Mockito;

public class RequestCWDTest {
	
	@Rule
    public TemporaryFolder testFolder = new TemporaryFolder();

	@Test
	public void testNoArgument() {

		
		Request req = mock(Request.class);

		Mockito.when(req.getSession()).thenReturn(session);	
		Mockito.when(req.getArgument()).thenReturn("");
		
		CWD cwd = new CWD();
		cwd.execute(req);
				
		Mockito.verify(session).sendCommand("501 Syntax error in parameters");
	}
	
	@Test
	public void testGoingBack() {
		Session session = mock(Session.class);
		Request req = mock(Request.class);

		Mockito.when(req.getSession()).thenReturn(session);	
		Mockito.when(req.getArgument()).thenReturn("..");
		
		CWD cwd = new CWD();
		cwd.execute(req);
				
		Mockito.verify(session).sendCommand("550 No access to parent folder");
	}
	
	@Test
	public void testFile() throws IOException {
		Request req = mock(Request.class);
		Session session = mock(Session.class);
		User u = mock(User.class);
		
		File tempFolder = testFolder.newFolder("folder");
		File tempFile = testFolder.newFile("folder/file.txt");

		Mockito.when(req.getSession()).thenReturn(session);	
		Mockito.when(req.getArgument()).thenReturn("/file.txt");	
		Mockito.when(session.getUser()).thenReturn(u);
		Mockito.when(u.getHomeFolder()).thenReturn(tempFolder.getAbsolutePath());	
		
	
		CWD cwd = new CWD();
		cwd.execute(req);
				
		Mockito.verify(session).sendCommand("550 Cannot go into a file (CWD on file)");
	}
	
	@Test
	public void testFolderDontExist() throws IOException {
		Request req = mock(Request.class);
		Session session = mock(Session.class);
		User u = mock(User.class);
		
		File tempFolder = testFolder.newFolder("folder");

		Mockito.when(req.getSession()).thenReturn(session);	
		Mockito.when(req.getArgument()).thenReturn("/file.txt");	
		Mockito.when(session.getUser()).thenReturn(u);
		Mockito.when(u.getHomeFolder()).thenReturn(tempFolder.getAbsolutePath());	
		
	
		CWD cwd = new CWD();
		cwd.execute(req);
				
		Mockito.verify(session).sendCommand("550 No such directory");
	}
	
	@Test
	public void testOk() throws IOException {
		Request req = mock(Request.class);
		Session session = mock(Session.class);
		User u = mock(User.class);
		

		File tempFolder = testFolder.newFolder("folder");
		(new File(tempFolder.getAbsolutePath() + "/test")).mkdirs();


		Mockito.when(req.getSession()).thenReturn(session);	
		Mockito.when(req.getArgument()).thenReturn("/test");	
		Mockito.when(session.getUser()).thenReturn(u);
		Mockito.when(u.getHomeFolder()).thenReturn(tempFolder.getAbsolutePath());	
		
	
		CWD cwd = new CWD();
		cwd.execute(req);
				
		Mockito.verify(session).sendCommand("250 CWD command successfull");
	}
	


}
