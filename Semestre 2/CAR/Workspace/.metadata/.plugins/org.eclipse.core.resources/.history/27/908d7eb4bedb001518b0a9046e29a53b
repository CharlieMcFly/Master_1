

import static org.mockito.Mockito.mock;

import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.Socket;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;
import org.mockito.Mockito;

import Commande.Request;
import Serveur.DataConnectionService;
import Serveur.Session;

public class LISTTest {

	@Rule
    public TemporaryFolder testFolder = new TemporaryFolder();
	
	private Session session;
	private Request req;
	private DataConnectionService ds;
	private OutputStream os;
	private Socket socket;
	
	@Before
    public void setUp() throws IOException {
		session = mock(Session.class);
		req = mock(Request.class);
		ds = mock(DataConnectionService.class);
		os = mock(OutputStream.class);
		socket = mock(Socket.class);
		
		Mockito.when(req.getSession()).thenReturn(session);	
		Mockito.when(session.getDataConnectionService()).thenReturn(ds);
		Mockito.when(ds.open()).thenReturn(socket);
		Mockito.when(socket.getOutputStream()).thenReturn(os);
    }
	
	@Test
	public void test() throws IOException {

		File tempFolder = testFolder.newFolder("folder");
		File tempFile = testFolder.newFile("folder/file.txt");
		
		Mockito.when(session.getServerPath()).thenReturn(tempFolder.getAbsolutePath());
		
		LIST list = new LIST();
		
		list.execute(req);
		
		Mockito.verify(session).sendCommand("226 Closing data connection");	
	}

}

