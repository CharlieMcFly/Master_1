package Stategy;

import static org.mockito.Mockito.mock;

import java.io.File;
import java.io.IOException;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;
import org.mockito.Mockito;

import Client.Client;
import Commande.Request;
import Serveur.Session;
import Serveur.User;
import Strategy.RequestCWD;

public class RequestCWDTest {
	
	@Rule
    public TemporaryFolder tmpFolder = new TemporaryFolder();

	@Test
	public void testNoArgument() {
	
		FtpRequest ftp = mock(FtpRequest.class);
		String [] request = {"CWD", ""};
		
		RequestCWD cwd = new RequestCWD();
		cwd.doRequest(ftp, request);
				
		Mockito.verify(ftp).sendMessage("501 Syntax error in parameters");
	}
	
	@Test
	public void testGoingBack() {
		FtpRequest ftp = mock(FtpRequest.class);
		String [] request = {"CWD", ".."};
		
		RequestCWD cwd = new RequestCWD();
		cwd.doRequest(ftp, request);
				
		Mockito.verify(ftp).sendMessage("550 No access to parent folder");
	}
	
	@Test
	public void testFile() throws IOException {
		FtpRequest ftp = mock(Request.class);
		String [] request = {"CWD", "fichier"};
		Client c = mock(Client.class);
		
		File folder = tmpFolder.newFolder("dossier");
		File file = tmpFolder.newFile("dossier/fichier");

		Mockito.when(ftp.getClient()).thenReturn(c);
		Mockito.when(c.getPathname()).thenReturn(folder.getAbsolutePath());	
		
	
		RequestCWD cwd = new RequestCWD();
		cwd.doRequest(ftp, request);
		
		Mockito.verify(ftp).sendMessage("550 Cannot go into a file (CWD on file)");
	}
	
	@Test
	public void testFolderDontExist() throws IOException {
		Request req = mock(Request.class);
		Session session = mock(Session.class);
		User u = mock(User.class);
		
		File tempFolder = testFolder.newFolder("folder");

		Mockito.when(req.getSession()).thenReturn(session);	
		Mockito.when(req.getArgument()).thenReturn("/file.txt");	
		Mockito.when(session.getUser()).thenReturn(u);
		Mockito.when(u.getHomeFolder()).thenReturn(tempFolder.getAbsolutePath());	
		
	
		CWD cwd = new CWD();
		cwd.execute(req);
				
		Mockito.verify(session).sendCommand("550 No such directory");
	}
	
	@Test
	public void testOk() throws IOException {
		Request req = mock(Request.class);
		Session session = mock(Session.class);
		User u = mock(User.class);
		

		File tempFolder = testFolder.newFolder("folder");
		(new File(tempFolder.getAbsolutePath() + "/test")).mkdirs();


		Mockito.when(req.getSession()).thenReturn(session);	
		Mockito.when(req.getArgument()).thenReturn("/test");	
		Mockito.when(session.getUser()).thenReturn(u);
		Mockito.when(u.getHomeFolder()).thenReturn(tempFolder.getAbsolutePath());	
		
	
		CWD cwd = new CWD();
		cwd.execute(req);
				
		Mockito.verify(session).sendCommand("250 CWD command successfull");
	}
	


}
