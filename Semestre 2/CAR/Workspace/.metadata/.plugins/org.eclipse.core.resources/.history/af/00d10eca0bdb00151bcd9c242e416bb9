package Strategy;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import Client.Client;
import Exceptions.RequestException;
import Serveur.FtpRequest;

public class RequestLIST implements Request {

	public void doRequest(FtpRequest ftp, String[] request)
			throws RequestException {
		Client c = ftp.getClient();
		/* Test si l'usage est correct */
		if (request.length != 1) {
			ftp.getWriter().println("USAGE : LIST");
			return;
		}
		/* Test si le client est connect√© */
		if(c == null){
			ftp.getWriter().println("Veuillez vous connecter.");
			return;
		}else{
			if(!c.isConnected()){
				ftp.getWriter().println("Veuillez vous connecter.");
				return;
			}
		}
		/* Test des droit */
		if (!ftp.getClient().canRead()) {
			ftp.sendMessage(425 + " Restriction au niveau des droits");
			return;
		}

		OutputStream output = null;
		try {
			// Opens connection
			ftp.sendMessage("150 File status okay; about to open data connection");

			ftp.getDataService().openDataStream();
			output = ftp.getDataService().getDataStream();
					
			InputStream is = Runtime.getRuntime().exec(new String[] {"ls", "-l", "~/CAR_TP1/Charlie"}).getInputStream();
			// Sends response through data socket
			byte[] buffer = new byte[1024];
			int nbBytes = 0;
			while ((nbBytes = is.read(buffer)) != -1) {
				output.write(buffer, 0, nbBytes);
			}

			ftp.sendMessage("226 Closing data connection");
			ftp.getDataService().closeDataStream();

		} catch (IOException ignore) {
			ftp.sendMessage("426 Connection closed, transfer aborted");
			ftp.getDataService().closeDataStream();
		} finally {
			try {
				output.close();
			} catch (Exception ignore) {
			}
		}

	}

}
