package Stategy;



import static org.mockito.Mockito.mock;

import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.Socket;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;
import org.mockito.Mockito;

import Serveur.DataService;
import Serveur.FtpRequest;
import Strategy.RequestLIST;



public class RequestLISTTest {

	@Rule
    public TemporaryFolder testFolder = new TemporaryFolder();
	
	private FtpRequest ftp;
	private String [] request;
	private DataService ds;
	private OutputStream out;
	private Socket socket;
	
	@Before
    public void setUp() throws IOException {
		ftp = mock(FtpRequest.class);
		ds = mock(DataService.class);
		out = mock(OutputStream.class);
		socket = mock(Socket.class);
		
		Mockito.when(ftp.getDataService()).thenReturn(ds);
		Mockito.when(ds.openDataStream()).thenReturn(socket);
		Mockito.when(socket.getOutputStream()).thenReturn(out);
    }
	
	@Test
	public void test() throws IOException {

		File tempFolder = testFolder.newFolder("dossier");
		File tempFile = testFolder.newFile("dossier/fichier");
		
		Mockito.when(ftp.getServerPath()).thenReturn(tempFolder.getAbsolutePath());
		
		RequestLIST list = new RequestLIST();
		
		list.doRequest(ftp, request);
		
		Mockito.verify(ftp).sendCommand("226 Closing data connection");	
	}

}

